// <auto-generated />
using System;
using GestAgape.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestAgape.Infrastructure.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20231207161531_Inscription")]
    partial class Inscription
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Management")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GestAgape.Core.Entities.Admission.AnneeAcademique", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AnneeDebut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnneeFin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AnneeAcademiques", "Admission");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Admission.Candidat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DossierPersonnelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Etablissement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomMere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomPere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfessionMere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessionPere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quartier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneMere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephonePere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vision")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DossierPersonnelId")
                        .IsUnique()
                        .HasFilter("[DossierPersonnelId] IS NOT NULL");

                    b.HasIndex("PersonneId")
                        .IsUnique();

                    b.ToTable("Admission", "Admission");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Admission.Concours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flyers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeureDebut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeureFin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Resultats")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Concours", "Admission");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Admission.DemandeAdmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AnneeAcademiqueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClasseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConcoursId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Decision")
                        .HasColumnType("int");

                    b.Property<Guid?>("InscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeAdmission")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnneeAcademiqueId");

                    b.HasIndex("CandidatId");

                    b.HasIndex("ClasseId");

                    b.HasIndex("ConcoursId");

                    b.HasIndex("InscriptionId")
                        .IsUnique()
                        .HasFilter("[InscriptionId] IS NOT NULL");

                    b.ToTable("DemandesAdmission", "Admission");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Admission.DossierPersonnel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActeNaissance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CNI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Photos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReleveBTS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReleveBac")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReleveLicence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReleveMaster1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReleveNiveau1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReleveNiveau2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DossiersPersonnel", "Admission");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Admission.Paiement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DemandeAdmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Montant")
                        .HasColumnType("float");

                    b.Property<int>("Motif")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DemandeAdmissionId");

                    b.ToTable("Paiements", "Admission");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Connexion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Connexions", "Identity");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Identity.Personne", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurriculumVitae")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Handicape")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Langue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LieuNaissance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nationalite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatutMatrimonial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Personnes", "Management");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Affectation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CampusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAffectation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("UserId");

                    b.ToTable("Affectations", "Settings");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Campus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IPESId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IPESId");

                    b.ToTable("Campus", "Settings");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.ChefDepartement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateNomination")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PersonneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Statut")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DepartementId");

                    b.HasIndex("PersonneId")
                        .IsUnique();

                    b.ToTable("ChefsDepartement", "Management");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Classe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("FraisEtudeDossier")
                        .HasColumnType("float");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NiveauId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProgrammeAcademique")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SpecialiteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CycleId");

                    b.HasIndex("NiveauId");

                    b.HasIndex("SpecialiteId");

                    b.ToTable("Classes", "Settings");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Cycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("FraisConcours")
                        .HasColumnType("float");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cycles", "Settings");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Departement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Departements", "Settings");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Filiere", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartementID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartementID");

                    b.ToTable("Filieres", "Settings");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Ipes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdresseCampusPrincipal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoitePostale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cachet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroCompteBancaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteWeb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IPES", "Settings");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Niveau", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Niveaux", "Settings");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Specialite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FiliereID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FiliereID");

                    b.ToTable("Specialites", "Settings");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.PasswordHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("PasswordHistories", "Identity");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Scolarite.FraisDossierExamen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AnneeAcademiqueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClasseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Montant")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AnneeAcademiqueId");

                    b.HasIndex("ClasseId");

                    b.ToTable("FrasisDossierExamen", "Scolarite");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Scolarite.FraisInscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AnneeAcademiqueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClasseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Montant")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AnneeAcademiqueId");

                    b.HasIndex("ClasseId");

                    b.ToTable("FraisInscription", "Scolarite");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Scolarite.FraisMedicaux", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AnneeAcademiqueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Montant")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AnneeAcademiqueId");

                    b.HasIndex("CampusId");

                    b.ToTable("FraisMedicaux", "Scolarite");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Scolarite.FraisSoutenance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AnneeAcademiqueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClasseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Montant")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AnneeAcademiqueId");

                    b.HasIndex("ClasseId");

                    b.ToTable("FraisSoutenances", "Scolarite");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Scolarite.Inscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MatriculeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MatriculeId");

                    b.ToTable("Inscriptions", "Scolarite");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Scolarite.Matricule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LibelleMatricule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Matricule", "Scolarite");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Scolarite.TrancheScolarite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AnneeAcademiqueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClasseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateLimitePaiement")
                        .HasColumnType("datetime2");

                    b.Property<string>("LibelleTranche")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Montant")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AnneeAcademiqueId");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClasseId");

                    b.ToTable("TranchesScolarites", "Scolarite");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", "Identity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Identity");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.ApplicationUsers", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LatestModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistredDate")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("ApplicationUsers");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Admission.Candidat", b =>
                {
                    b.HasOne("GestAgape.Core.Entities.Admission.DossierPersonnel", "DossierPersonnel")
                        .WithOne("Candidat")
                        .HasForeignKey("GestAgape.Core.Entities.Admission.Candidat", "DossierPersonnelId");

                    b.HasOne("GestAgape.Core.Entities.Identity.Personne", "Personne")
                        .WithOne("Candidat")
                        .HasForeignKey("GestAgape.Core.Entities.Admission.Candidat", "PersonneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DossierPersonnel");

                    b.Navigation("Personne");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Admission.DemandeAdmission", b =>
                {
                    b.HasOne("GestAgape.Core.Entities.Admission.AnneeAcademique", "AnneeAcademique")
                        .WithMany("Demandes")
                        .HasForeignKey("AnneeAcademiqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestAgape.Core.Entities.Admission.Candidat", "Candidat")
                        .WithMany("Demandes")
                        .HasForeignKey("CandidatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestAgape.Core.Entities.Parametrage.Classe", "Classe")
                        .WithMany("DemandeAdmissions")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestAgape.Core.Entities.Admission.Concours", "Concours")
                        .WithMany("DemandeAdmissions")
                        .HasForeignKey("ConcoursId");

                    b.HasOne("GestAgape.Core.Entities.Scolarite.Inscription", "Inscription")
                        .WithOne("DemandeAdmission")
                        .HasForeignKey("GestAgape.Core.Entities.Admission.DemandeAdmission", "InscriptionId");

                    b.Navigation("AnneeAcademique");

                    b.Navigation("Candidat");

                    b.Navigation("Classe");

                    b.Navigation("Concours");

                    b.Navigation("Inscription");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Admission.Paiement", b =>
                {
                    b.HasOne("GestAgape.Core.Entities.Admission.DemandeAdmission", "DemandeAdmission")
                        .WithMany("Paiements")
                        .HasForeignKey("DemandeAdmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DemandeAdmission");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Connexion", b =>
                {
                    b.HasOne("GestAgape.Core.Entities.ApplicationUsers", "User")
                        .WithMany("Connexions")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Affectation", b =>
                {
                    b.HasOne("GestAgape.Core.Entities.Parametrage.Campus", "Campus")
                        .WithMany("Affectations")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestAgape.Core.Entities.ApplicationUsers", "User")
                        .WithMany("Affectations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Campus", b =>
                {
                    b.HasOne("GestAgape.Core.Entities.Parametrage.Ipes", "Ipes")
                        .WithMany("Campus")
                        .HasForeignKey("IPESId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ipes");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.ChefDepartement", b =>
                {
                    b.HasOne("GestAgape.Core.Entities.Parametrage.Departement", "Departement")
                        .WithMany("ChefDepartements")
                        .HasForeignKey("DepartementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestAgape.Core.Entities.Identity.Personne", "Personne")
                        .WithOne("ChefDepartement")
                        .HasForeignKey("GestAgape.Core.Entities.Parametrage.ChefDepartement", "PersonneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departement");

                    b.Navigation("Personne");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Classe", b =>
                {
                    b.HasOne("GestAgape.Core.Entities.Parametrage.Cycle", "Cycle")
                        .WithMany("Classes")
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestAgape.Core.Entities.Parametrage.Niveau", "Niveau")
                        .WithMany("Classes")
                        .HasForeignKey("NiveauId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestAgape.Core.Entities.Parametrage.Specialite", "Specialite")
                        .WithMany("Classes")
                        .HasForeignKey("SpecialiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cycle");

                    b.Navigation("Niveau");

                    b.Navigation("Specialite");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Filiere", b =>
                {
                    b.HasOne("GestAgape.Core.Entities.Parametrage.Departement", "Departement")
                        .WithMany("Filieres")
                        .HasForeignKey("DepartementID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departement");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Specialite", b =>
                {
                    b.HasOne("GestAgape.Core.Entities.Parametrage.Filiere", "Filiere")
                        .WithMany("Specialites")
                        .HasForeignKey("FiliereID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filiere");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.PasswordHistory", b =>
                {
                    b.HasOne("GestAgape.Core.Entities.ApplicationUsers", "User")
                        .WithMany("PasswordHistories")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Scolarite.FraisDossierExamen", b =>
                {
                    b.HasOne("GestAgape.Core.Entities.Admission.AnneeAcademique", "AnneeAcademique")
                        .WithMany()
                        .HasForeignKey("AnneeAcademiqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestAgape.Core.Entities.Parametrage.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnneeAcademique");

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Scolarite.FraisInscription", b =>
                {
                    b.HasOne("GestAgape.Core.Entities.Admission.AnneeAcademique", "AnneeAcademique")
                        .WithMany()
                        .HasForeignKey("AnneeAcademiqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestAgape.Core.Entities.Parametrage.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnneeAcademique");

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Scolarite.FraisMedicaux", b =>
                {
                    b.HasOne("GestAgape.Core.Entities.Admission.AnneeAcademique", "AnneeAcademique")
                        .WithMany()
                        .HasForeignKey("AnneeAcademiqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestAgape.Core.Entities.Parametrage.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnneeAcademique");

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Scolarite.FraisSoutenance", b =>
                {
                    b.HasOne("GestAgape.Core.Entities.Admission.AnneeAcademique", "AnneeAcademique")
                        .WithMany()
                        .HasForeignKey("AnneeAcademiqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestAgape.Core.Entities.Parametrage.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnneeAcademique");

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Scolarite.Inscription", b =>
                {
                    b.HasOne("GestAgape.Core.Entities.Scolarite.Matricule", "Matricule")
                        .WithMany("Inscription")
                        .HasForeignKey("MatriculeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matricule");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Scolarite.TrancheScolarite", b =>
                {
                    b.HasOne("GestAgape.Core.Entities.Admission.AnneeAcademique", "AnneeAcademique")
                        .WithMany()
                        .HasForeignKey("AnneeAcademiqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestAgape.Core.Entities.Parametrage.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestAgape.Core.Entities.Parametrage.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnneeAcademique");

                    b.Navigation("Campus");

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Admission.AnneeAcademique", b =>
                {
                    b.Navigation("Demandes");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Admission.Candidat", b =>
                {
                    b.Navigation("Demandes");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Admission.Concours", b =>
                {
                    b.Navigation("DemandeAdmissions");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Admission.DemandeAdmission", b =>
                {
                    b.Navigation("Paiements");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Admission.DossierPersonnel", b =>
                {
                    b.Navigation("Candidat");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Identity.Personne", b =>
                {
                    b.Navigation("Candidat");

                    b.Navigation("ChefDepartement");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Campus", b =>
                {
                    b.Navigation("Affectations");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Classe", b =>
                {
                    b.Navigation("DemandeAdmissions");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Cycle", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Departement", b =>
                {
                    b.Navigation("ChefDepartements");

                    b.Navigation("Filieres");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Filiere", b =>
                {
                    b.Navigation("Specialites");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Ipes", b =>
                {
                    b.Navigation("Campus");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Niveau", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Parametrage.Specialite", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Scolarite.Inscription", b =>
                {
                    b.Navigation("DemandeAdmission")
                        .IsRequired();
                });

            modelBuilder.Entity("GestAgape.Core.Entities.Scolarite.Matricule", b =>
                {
                    b.Navigation("Inscription");
                });

            modelBuilder.Entity("GestAgape.Core.Entities.ApplicationUsers", b =>
                {
                    b.Navigation("Affectations");

                    b.Navigation("Connexions");

                    b.Navigation("PasswordHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
